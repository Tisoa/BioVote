package diploma.pr.biovote.data.remote.model

import android.util.Log
import okhttp3.Interceptor
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object ApiClient {

    /** üëâ  IP+–ø–æ—Ä—Ç Spring-–±–µ–∫–µ–Ω–¥—É.  */
    private const val BASE_URL = "http://192.168.31.190:8081/"

    /** –∫–∞—Å—Ç–æ–º–Ω–∏–π logger: –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ ¬´—Å–º—ñ—Ç—Ç—è¬ª –∑ multipart-—Ç—ñ–ª–∞ (jpg) */
    private fun httpLogger() = HttpLoggingInterceptor { msg ->
        if (msg.startsWith("--")      /* boundary */
            || msg.startsWith("ÔøΩÔøΩÔøΩ")  /* –ø–æ—á–∞—Ç–æ–∫ jpeg */
        ) return@HttpLoggingInterceptor
        Log.d("HTTP", msg)
    }.apply { level = HttpLoggingInterceptor.Level.BODY }

    /** –æ–¥–∏–Ω-—î–¥–∏–Ω–∏–π OkHttp */
    private val okHttp = OkHttpClient.Builder()
        .addInterceptor(httpLogger())
        .build()

    /** Retrofit-service ‚Äì –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—é–¥–∏ */
    val service: ApiService by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttp)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(ApiService::class.java)
    }
}